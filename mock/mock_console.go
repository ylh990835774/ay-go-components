// Code generated by MockGen. DO NOT EDIT.
// Source: git.qpaas.com/go-components/webconsole/pkg/console (interfaces: Console)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "git.qpaas.com/go-components/webconsole/pkg/common"
	engine "git.qpaas.com/go-components/webconsole/pkg/engine"
	gomock "github.com/golang/mock/gomock"
)

// MockConsole is a mock of Console interface.
type MockConsole struct {
	ctrl     *gomock.Controller
	recorder *MockConsoleMockRecorder
}

// MockConsoleMockRecorder is the mock recorder for MockConsole.
type MockConsoleMockRecorder struct {
	mock *MockConsole
}

// NewMockConsole creates a new mock instance.
func NewMockConsole(ctrl *gomock.Controller) *MockConsole {
	mock := &MockConsole{ctrl: ctrl}
	mock.recorder = &MockConsoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsole) EXPECT() *MockConsoleMockRecorder {
	return m.recorder
}

// ConsoleType mocks base method.
func (m *MockConsole) ConsoleType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConsoleType indicates an expected call of ConsoleType.
func (mr *MockConsoleMockRecorder) ConsoleType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleType", reflect.TypeOf((*MockConsole)(nil).ConsoleType))
}

// Destory mocks base method.
func (m *MockConsole) Destory(arg0 engine.Engine) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destory", arg0)
}

// Destory indicates an expected call of Destory.
func (mr *MockConsoleMockRecorder) Destory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destory", reflect.TypeOf((*MockConsole)(nil).Destory), arg0)
}

// Fork mocks base method.
func (m *MockConsole) Fork(arg0 common.ConnConfig, arg1 string) (engine.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fork", arg0, arg1)
	ret0, _ := ret[0].(engine.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fork indicates an expected call of Fork.
func (mr *MockConsoleMockRecorder) Fork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockConsole)(nil).Fork), arg0, arg1)
}

// QueryHandler mocks base method.
func (m *MockConsole) QueryHandler(arg0, arg1, arg2 string, arg3 *common.HandlerOptions) *common.QuerySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHandler", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*common.QuerySet)
	return ret0
}

// QueryHandler indicates an expected call of QueryHandler.
func (mr *MockConsoleMockRecorder) QueryHandler(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHandler", reflect.TypeOf((*MockConsole)(nil).QueryHandler), arg0, arg1, arg2, arg3)
}

// SchemaHandler mocks base method.
func (m *MockConsole) SchemaHandler(arg0 *common.HandlerOptions) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchemaHandler", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchemaHandler indicates an expected call of SchemaHandler.
func (mr *MockConsoleMockRecorder) SchemaHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchemaHandler", reflect.TypeOf((*MockConsole)(nil).SchemaHandler), arg0)
}

// TableHandler mocks base method.
func (m *MockConsole) TableHandler(arg0 string, arg1 *common.HandlerOptions) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableHandler", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableHandler indicates an expected call of TableHandler.
func (mr *MockConsoleMockRecorder) TableHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableHandler", reflect.TypeOf((*MockConsole)(nil).TableHandler), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: git.qpaas.com/go-components/webconsole/pkg/engine (interfaces: Engine)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "git.qpaas.com/go-components/webconsole/pkg/common"
	gomock "github.com/golang/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEngine) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEngineMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEngine)(nil).Close))
}

// Query mocks base method.
func (m *MockEngine) Query(arg0, arg1, arg2 string, arg3 int64) *common.QuerySet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*common.QuerySet)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockEngineMockRecorder) Query(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockEngine)(nil).Query), arg0, arg1, arg2, arg3)
}

// RegistryQueryPost mocks base method.
func (m *MockEngine) RegistryQueryPost(arg0 common.PostHook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegistryQueryPost", arg0)
}

// RegistryQueryPost indicates an expected call of RegistryQueryPost.
func (mr *MockEngineMockRecorder) RegistryQueryPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryQueryPost", reflect.TypeOf((*MockEngine)(nil).RegistryQueryPost), arg0)
}

// RegistryQueryPrev mocks base method.
func (m *MockEngine) RegistryQueryPrev(arg0 common.PreHook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegistryQueryPrev", arg0)
}

// RegistryQueryPrev indicates an expected call of RegistryQueryPrev.
func (mr *MockEngineMockRecorder) RegistryQueryPrev(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryQueryPrev", reflect.TypeOf((*MockEngine)(nil).RegistryQueryPrev), arg0)
}

// Schema mocks base method.
func (m *MockEngine) Schema() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schema indicates an expected call of Schema.
func (mr *MockEngineMockRecorder) Schema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockEngine)(nil).Schema))
}

// Table mocks base method.
func (m *MockEngine) Table(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Table indicates an expected call of Table.
func (mr *MockEngineMockRecorder) Table(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockEngine)(nil).Table), arg0)
}
